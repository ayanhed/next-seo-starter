# PWA and Service Worker Patterns

## PWA Configuration

### Manifest Configuration

- **Use centralized manifest** in [`src/app/manifest.ts`](mdc:src/app/manifest.ts)
- **Derive values from `appConfig`** for consistency
- **Include proper PWA metadata** for app store listings

```ts
import { appConfig } from "@/config/app";

export default function manifest(): MetadataRoute.Manifest {
  return {
    name: appConfig.app.name,
    short_name: "RegChat",
    description: appConfig.app.description,
    start_url: "/",
    display: "standalone",
    background_color: appConfig.theme.background,
    theme_color: appConfig.theme.primary,
    icons: [
      {
        src: "/android-chrome-192x192.png",
        sizes: "192x192",
        type: "image/png",
      },
      {
        src: "/android-chrome-512x512.png",
        sizes: "512x512",
        type: "image/png",
      },
    ],
    categories: appConfig.app.categories,
    lang: appConfig.app.locale,
  };
}
```

### Service Worker Setup

- **Entry point**: [`src/app/sw.ts`](mdc:src/app/sw.ts) - Service worker source
- **Built output**: [`public/sw.js`](mdc:public/sw.js) - Compiled service worker
- **Registration**: Handled in [`src/app/providers.tsx`](mdc:src/app/providers.tsx)

## Service Worker Patterns

### Caching Strategies

- **Use appropriate caching strategies** for different resource types
- **Implement cache-first for static assets** (CSS, JS, images)
- **Use network-first for API calls** with cache fallback
- **Cache offline page** for better offline experience

```ts
// Cache-first for static assets
const staticCacheStrategy = new CacheFirst({
  cacheName: "static-assets",
  plugins: [
    new ExpirationPlugin({
      maxEntries: 100,
      maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
    }),
  ],
});

// Network-first for API calls
const apiCacheStrategy = new NetworkFirst({
  cacheName: "api-cache",
  plugins: [
    new ExpirationPlugin({
      maxEntries: 50,
      maxAgeSeconds: 5 * 60, // 5 minutes
    }),
  ],
});
```

### Offline Support

- **Provide offline fallback page** at [`src/app/offline/page.tsx`](mdc:src/app/offline/page.tsx)
- **Cache essential resources** for offline functionality
- **Handle offline state gracefully** in components

```tsx
// Offline page component
export default function OfflinePage() {
  return (
    <div className="flex flex-col items-center justify-center min-h-screen p-4">
      <h1 className="text-2xl font-bold mb-4">You're Offline</h1>
      <p className="text-[var(--color-muted-foreground)] text-center mb-6">
        Please check your internet connection and try again.
      </p>
      <Button onClick={() => window.location.reload()}>Retry</Button>
    </div>
  );
}
```

## PWA Best Practices

### App Installation

- **Provide clear install prompts** for PWA installation
- **Handle beforeinstallprompt event** to control installation timing
- **Show installation benefits** to encourage adoption

### Performance Optimization

- **Precache critical resources** for fast loading
- **Use appropriate cache strategies** for different content types
- **Implement background sync** for offline actions

### User Experience

- **Provide offline feedback** when network is unavailable
- **Sync data when connection is restored** using background sync
- **Maintain app state** across sessions

## Service Worker Registration

### Client-Side Registration

- **Register service worker** in providers or layout
- **Handle registration errors** gracefully
- **Show installation prompts** when appropriate

```tsx
// In providers.tsx or layout
useEffect(() => {
  if ("serviceWorker" in navigator) {
    navigator.serviceWorker
      .register("/sw.js")
      .then((registration) => {
        console.log("SW registered: ", registration);
      })
      .catch((registrationError) => {
        console.log("SW registration failed: ", registrationError);
      });
  }
}, []);
```

### Update Handling

- **Notify users of service worker updates**
- **Implement update flow** for new versions
- **Handle update conflicts** gracefully

## PWA Testing

### Development Testing

- **Test offline functionality** using DevTools
- **Verify caching strategies** work correctly
- **Check installation prompts** appear appropriately

### Production Testing

- **Use Lighthouse** to audit PWA score
- **Test on various devices** and browsers
- **Verify offline functionality** in real conditions

## Security Considerations

### HTTPS Requirement

- **PWA features require HTTPS** in production
- **Use localhost for development** (allowed exception)
- **Ensure proper SSL configuration** on hosting

### Content Security Policy

- **Implement appropriate CSP** for PWA security
- **Allow service worker execution** in CSP
- **Restrict resource loading** to trusted sources

## Analytics and Monitoring

### PWA Metrics

- **Track installation rates** and usage patterns
- **Monitor offline usage** and sync success rates
- **Measure performance improvements** from caching

### Error Tracking

- **Log service worker errors** for debugging
- **Monitor cache hit rates** and performance
- **Track user engagement** with PWA features
  description:
  globs:
  alwaysApply: true

---
